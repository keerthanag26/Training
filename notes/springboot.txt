Spring Boot


Spring Boot offers a fast way to build applications. 
It looks at your classpath and at the beans you have configured, makes reasonable assumptions about what you are missing, and adds those items. 
With Spring Boot, you can focus more on business features and less on infrastructure.


Spring Boot Features

Maven/gradle

Web Development
SpringApplication
Admin features
Externalized Configuration
Properties Files
YAML Support
Type-safe Configuration
Logging
Security


There are four layers in Spring Boot are as follows:

Presentation Layer
Business Layer
Persistence Layer
Database Layer
Spring Boot Architecture


Presentation Layer: The presentation layer handles the HTTP requests, translates the JSON parameter to object, and authenticates the request and transfer it to the business layer. In short, it consists of views i.e., frontend part.

Business Layer: The business layer handles all the business logic. It consists of service classes and uses services provided by data access layers. It also performs authorization and validation.

Persistence Layer: The persistence layer contains all the storage logic and translates business objects from and to database rows.

Database Layer: In the database layer, CRUD (create, retrieve, update, delete) operations are performed.


Spring Boot Flow Architecture
Spring Boot Architecture
Now we have validator classes, view classes, and utility classes.
Spring Boot uses all the modules of Spring-like Spring MVC, Spring Data, etc. The architecture of Spring Boot is the same as the architecture of Spring MVC, except one thing: there is no need for DAO and DAOImpl classes in Spring boot.
Creates a data access layer and performs CRUD operation.
The client makes the HTTP requests (PUT or GET).
The request goes to the controller, and the controller maps that request and handles it. After that, it calls the service logic if required.
In the service layer, all the business logic performs. It performs the logic on the data that is mapped to JPA with model classes.
A JSP page is returned to the user if no error occurred.


Rest api 
//we have to save data in db, retrive data from DB, Manipulate data in DB 

methods in API
1)Get - To get/fetch the data
2)Post - Insert the data 
3)Put - update the data - check the data is already exist and update accordingly 
4)Delete -delete data



REST stands for REpresentational State Transfer. 
It is developed by Roy Thomas Fielding, who also developed HTTP. 
The main goal of RESTful web services is to make web services more effective. 
RESTful web services try to define services using the different concepts that are already present in HTTP. 
REST is an architectural approach, not a protocol.


It does not define the standard message exchange format. 
We can build REST services with both XML and JSON. 
JSON is more popular format with REST. 
The key abstraction is a resource in REST. A resource can be anything. It can be accessed through a Uniform Resource Identifier (URI). For example:

The resource has representations like XML, HTML, and JSON. The current state capture by representational resource. 
When we request a resource, we provide the representation of the resource. 

The important methods of HTTP are:

GET: It reads a resource.
PUT: It updates an existing resource.
POST: It creates a new resource.
DELETE: It deletes the resource.
For example, if we want to perform the following actions in the social media application, we get the corresponding results.

POST /users: It creates a user.

GET /users/{id}: It retrieves the detail of a user.

GET /users: It retrieves the detail of all users.

DELETE /users: It deletes all users.

DELETE /users/{id}: It deletes a user.

GET /users/{id}/posts/post_id: It retrieve the detail of a specific post.

POST / users/{id}/ posts: It creates a post of the user.

Further, we will implement these URI in our project.

HTTP also defines the following standard status code:

404: RESOURCE NOT FOUND
200: SUCCESS
201: CREATED
401: UNAUTHORIZED
500: SERVER ERROR


RESTful Service Constraints
There must be a service producer and service consumer.
The service is stateless.
The service result must be cacheable.
The interface is uniform and exposing resources.
The service should assume a layered architecture.

Advantages of RESTful web services
RESTful web services are platform-independent.
It can be written in any programming language and can be executed on any platform.
It provides different data format like JSON, text, HTML, and XML.
It is fast in comparison to SOAP because there is no strict specification like SOAP.
These are reusable.
They are language neutral.


@SpringBootApplication is a convenience annotation that adds all of the following:

@Configuration: Tags the class as a source of bean definitions for the application context.

@EnableAutoConfiguration: Tells Spring Boot to start adding beans based on classpath settings, other beans, and various property settings. 
For example, if spring-webmvc is on the classpath, this annotation flags the application as a web application and activates key behaviors, such as setting up a DispatcherServlet.

@ComponentScan: Tells Spring to look for other components, configurations, and services in the com/example package, letting it find the controllers.

The main() method uses Spring Bootâ€™s SpringApplication.run() method to launch an application. Did you notice that there was not a single line of XML? 
There is no web.xml file, either. This web application is 100% pure Java and you did not have to deal with configuring any plumbing or infrastructure.